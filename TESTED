local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/Kronos"))()
local WorkspacePlayers = game:GetService("Workspace").Game.Players
local Players = game:GetService('Players')
local localplayer = Players.LocalPlayer
local infjmp = false
getgenv().Settings = {
    moneyfarm = false,
    afkfarm = false,
    NoCameraShake = false,
    Downedplayeresp = false,
    AutoRespawn = false,
    TicketFarm = false,
    Speed = 1450,
    Jump = 3,
    reviveTime = 3,
    DownedColor = Color3.fromRGB(30,30,30),
    PlayerColor = Color3.fromRGB(177, 255, 101),

    stats = {
        TicketFarm = {
            earned = nil,
            duration = 0
        },

        TokenFarm = {
            earned = nil,
            duration = 0
        }

    }
}
local window = library:Window({
   Title = "Evade - StellarHub",
   Accent = Color3.fromRGB(69,69,207),
   Logo = 3610245066,
   ToggleKey = Enum.KeyCode.LeftAlt
})

local tab = window:NewTab({
   Logo = 14768967526
})

local tabsection = tab:TabSection({
   Title = "StellarHub Mobile"
})

local column = tabsection:AddColumn({
   Title = "Farm/tools"
})

local section = column:Section({
   Title = "Farm/tools"
})

section:Toggle({
   Text = "Auto Respawn",
   State = false,
   Callback = function(State)
       Settings.AutoRespawn = State
   end
})

section:Toggle({
   Text = "Auto Revive Player",
   State = false,
   Callback = function(State)
       Settings.moneyfarm = State
   end
})

section:Toggle({
   Text = "Auto Win Games",
   State = false,
   Callback = function(State)
       Settings.afkfarm = State
   end
})

section:Toggle({
   Text = "Fast Revive",
   State = false,
   Callback = function(State)
   if State then
       workspace.Game.Settings:SetAttribute("ReviveTime", 2.2)
   else
       workspace.Game.Settings:SetAttribute("ReviveTime", Settings.reviveTime)
   end
  end
})

section:Toggle({
   Text = "Infinite Jump",
   State = false,
   Callback = function(State)
       infjmp = State
   end
})

getgenv().autojumpmpt = true

function autojump()
    local plr = game:GetService('Players').LocalPlayer
    repeat wait() until plr.Character ~= nil
    plr.Character:WaitForChild('Humanoid').StateChanged:Connect(function(old, new)
        if new == Enum.HumanoidStateType.Landed and getgenv().autojumpmpt then
            plr.Character:WaitForChild('Humanoid'):ChangeState('Jumping')
        end
    end)
end

autojump()

game:GetService('Players').LocalPlayer.CharacterAdded:Connect(autojump)

section:Toggle({
   Text = "Bhop",
   State = false,
   Callback = function(state)
       getgenv().autojumpmpt = state
   end
})

section:Button({
   Text = "Instant Respawn",
   Callback = function()
       game:GetService("ReplicatedStorage").Events.Respawn:FireServer()  
   end
})

function hidename()
    getgenv().name = "Stellar Hub"

    local Plr = game.Players.LocalPlayer
    for Index, Value in next, game:GetDescendants() do 
        if Value.ClassName == "TextLabel" then 
            local has = string.find(Value.Text,Plr.Name) 
            if has then 
                local str = Value.Text:gsub(Plr.Name,name)
                Value.Text = str 
            end
            Value:GetPropertyChangedSignal("Text"):Connect(function()
                local str = Value.Text:gsub(Plr.Name,name)
                Value.Text = str 
            end)
        end
    end

    game.DescendantAdded:Connect(function(Value)
        if Value.ClassName == "TextLabel" then 
            local has = string.find(Value.Text,Plr.Name)
            Value:GetPropertyChangedSignal("Text"):Connect(function()
                local str = Value.Text:gsub(Plr.Name,name)
                Value.Text = str 
            end)
            if has then 
                local str = Value.Text:gsub(Plr.Name,name)
                Value.Text = str 
            end
            
        end
    end)
end

section:Button({
   Text = "Hide Name",
   Callback = function()
    hidename()
       print("StellarHub on top")  
   end
})

game:GetService("UserInputService").jumpRequest:Connect(function()
    if infjmp then
        game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState("Jumping")
    end
end)

section:Button({
   Text = "FullBright",
   Callback = function()
        Game.Lighting.Brightness = 4
        Game.Lighting.FogEnd = 100000
        Game.Lighting.GlobalShadows = false
        Game.Lighting.ClockTime = 12
   end
})

section:Button({
   Text = "Remove spectator camera",
   Callback = function()
     Settings.NoCameraShake = State
   end
})

section:Button({
   Text = "Anti-AFK",
   Callback = function()
     print("Enabled")
   end
})

section:Slider({
   Text = "Speed Changer (1450 default)",
   Min = 1450,
   Max = 8000,
   Def = 1450,
   Callback = function(Value)
      Settings.Speed = Value
   end 
})

section:Textbox({
   Text = "Change speed value",
   Callback = function(Value)
     Settings.Speed = Value
   end
})

section:Slider({
   Text = "Change Jump Power (3 default)",
   Min = 3,
   Max = 20,
   Def = 3,
   Callback = function(Value)
      Settings.Jump = Value
   end 
})

section:Textbox({
   Text = "Change Jump Power",
   Callback = function(Value)
      Settings.Jump = Value
   end 
})


local column1 = tabsection:AddColumn({
   Title = "Esp"
})

local section1 = column1:Section({
   Title = "Esp Features"
})

local PlayerColor = Color3.fromRGB(177, 255, 101)
local Esp = loadstring(game:HttpGet("https://pastebin.com/raw/BHuX39ve"))()
Esp.Enabled = false
Esp.Tracers = false
Esp.Boxes = false
Esp.PlayerColor = PlayerColor


local function ToggleBoxes(bool)
    Esp.Boxes = bool
end

local function ToggleNames(bool)
    Esp.Names = bool
end

local function ToggleDistance(bool)
    Esp.Distance = bool
end

local function ToggleTeamColor(bool)
    Esp.TeamColor = bool
end

local function ToggleTracers(bool)
    Esp.Tracers = bool
end

local function TogglePlayers(bool)
    Esp.Players = bool
end

Esp:AddObjectListener(WorkspacePlayers, {
    Color = Color3.fromRGB(255, 0, 0),
    Type = "Model",
    PrimaryPart = function(obj)
        local hrp = obj:FindFirstChild('HRP')
        while not hrp do
            wait()
            hrp = obj:FindFirstChild('HRP')
        end
        return hrp
    end,
    Validator = function(obj)
        return not game.Players:GetPlayerFromCharacter(obj)
    end,
    CustomName = function(obj)
        return '[BOT] ' .. obj.Name
    end,
    IsEnabled = "NPCs",
})

section1:Toggle({
   Text = "Enable ESP",
   State = false,
   Callback = function(bool)
        ESPEnabled = bool
        Esp.Enabled = bool
   end
})

section1:Toggle({
   Text = "Players",
   State = false,
   Callback = TogglePlayers,
})

section1:Toggle({
   Text = "Bot",
   State = false,
   Callback = function(State)
       Esp.NPCs = State
   end
})

section1:Toggle({
   Text = "Down Player",
   State = false,
   Callback = function(State)
       Settings.Downedplayeresp = State
   end
})

section1:Toggle({
   Text = "Boxes",
   State = false,
   Callback = ToggleBoxes,
})

section1:Toggle({
   Text = "Names",
   State = false,
   Callback = ToggleNames,
})

section1:Toggle({
   Text = "Distance",
   State = false,
   Callback = ToggleDistance,
})

section1:Toggle({
   Text = "Team Color",
   State = false,
   Callback = ToggleTeamColor,
})

section1:Toggle({
   Text = "Tracers",
   State = false,
   Callback = ToggleTracers,
})


local FindAI = function()
    for _,v in pairs(WorkspacePlayers:GetChildren()) do
        if not Players:FindFirstChild(v.Name) then
            return v
        end
    end
end

local GetDownedPlr = function()
    for i,v in pairs(WorkspacePlayers:GetChildren()) do
        if v:GetAttribute("Downed") then
            return v
        end
    end
end

local revive = function()
    local downedplr = GetDownedPlr()
    if downedplr ~= nil and downedplr:FindFirstChild('HumanoidRootPart') then
        task.spawn(function()
            while task.wait() do
                if localplayer.Character then
                    workspace.Game.Settings:SetAttribute("ReviveTime", 2.2)
                    localplayer.Character:FindFirstChild('HumanoidRootPart').CFrame = CFrame.new(downedplr:FindFirstChild('HumanoidRootPart').Position.X, downedplr:FindFirstChild('HumanoidRootPart').Position.Y + 3, downedplr:FindFirstChild('HumanoidRootPart').Position.Z)
                    task.wait()
                    game:GetService("ReplicatedStorage").Events.Revive.RevivePlayer:FireServer(tostring(downedplr), false)
                    task.wait(4.5)
                    game:GetService("ReplicatedStorage").Events.Revive.RevivePlayer:FireServer(tostring(downedplr), true)
                    game:GetService("ReplicatedStorage").Events.Revive.RevivePlayer:FireServer(tostring(downedplr), true)
                    game:GetService("ReplicatedStorage").Events.Revive.RevivePlayer:FireServer(tostring(downedplr), true)
                    break
                end
            end
        end)
    end
end

local old
old = hookmetamethod(game,"__namecall",newcclosure(function(self,...)
    local Args = {...}
    local method = getnamecallmethod()
    if tostring(self) == 'Communicator' and method == "InvokeServer" and Args[1] == "update" then
        return Settings.Speed, Settings.Jump 
    end
    return old(self,...)
end))

local formatNumber = (function(value)
	value = tostring(value)
	return value:reverse():gsub("%d%d%d", "%1,"):reverse():gsub("^,", "")
end)

function Format(Int)
	return string.format("%02i", Int)
end

function convertToHMS(Seconds)
	local Minutes = (Seconds - Seconds%60)/60
	Seconds = Seconds - Minutes*60
	local Hours = (Minutes - Minutes%60)/60
	Minutes = Minutes - Hours*60
	return Format(Hours).."H "..Format(Minutes).."M "..Format(Seconds)..'S'
end

task.spawn(function()
    while task.wait(1) do
        if Settings.moneyfarm then
            Settings.stats.TokenFarm.duration += 1
        end 
    end
end)

Esp.Overrides.GetColor = function(char)
   local GetPlrFromChar = Esp:GetPlrFromChar(char)
   if GetPlrFromChar then
       if Settings.Downedplayeresp and GetPlrFromChar.Character:GetAttribute("Downed") then
           return Settings.DownedColor
       end
   end
   return Settings.PlayerColor
end

--local gettickets = localplayer:GetAttribute('Tickets')
local GetTokens = localplayer:GetAttribute('Tokens')

localplayer:GetAttributeChangedSignal('Tickets'):Connect(function()
    --local tickets = tostring(gettickets - localplayer:GetAttribute('Tickets'))
    --local cleanvalue = string.split(tickets, "-")
    Settings.stats.TicketFarm.earned = cleanvalue[2]
end)

localplayer:GetAttributeChangedSignal('Tokens'):Connect(function()
    local tokens = tostring(GetTokens - localplayer:GetAttribute('Tokens'))
    local cleanvalue = string.split(tokens, "-")
    print(cleanvalue[2])
    Settings.stats.TokenFarm.earned = cleanvalue[2]
end)

localplayer:GetAttributeChangedSignal('Tokens'):Connect(function()
    local tokens = tostring(GetTokens - localplayer:GetAttribute('Tokens'))
    local cleanvalue = string.split(tokens, "-")
    print(cleanvalue[2])
    Settings.stats.TokenFarm.earned = cleanvalue[2]
end)

task.spawn(function()
    while task.wait() do
        if Settings.TicketFarm then
            TypeLabelC5:Set('Ticket Farm')
            DurationLabelC5:Set('Duration:'..convertToHMS(Settings.stats.TicketFarm.duration))
            EarnedLabelC5:Set('Earned:'.. formatNumber(Settings.stats.TicketFarm.earned))
            --TicketsLabelC5:Set('Total Tickets: '..localplayer:GetAttribute('Tickets'))

            if game.Players.LocalPlayer:GetAttribute('InMenu') ~= true and localplayer:GetAttribute('Dead') ~= true then
                for i,v in pairs(game:GetService("Workspace").Game.Effects.Tickets:GetChildren()) do
                    localplayer.Character.HumanoidRootPart.CFrame = CFrame.new(v:WaitForChild('HumanoidRootPart').Position)
                end
            else
                task.wait(2)
                game:GetService("ReplicatedStorage").Events.Respawn:FireServer()
            end
            if localplayer.Character and localplayer.Character:GetAttribute("Downed") then
                game:GetService("ReplicatedStorage").Events.Respawn:FireServer()
                task.wait(2)
            end
        end
    end
end)


task.spawn(function()
    while task.wait() do
        if Settings.AutoRespawn then
             if localplayer.Character and localplayer.Character:GetAttribute("Downed") then
                game:GetService("ReplicatedStorage").Events.Respawn:FireServer()
             end
        end

        if Settings.NoCameraShake then
            localplayer.PlayerScripts.CameraShake.Value = CFrame.new(0,0,0) * CFrame.new(0,0,0)
        end
        if Settings.moneyfarm then          
            if localplayer:GetAttribute("InMenu") and localplayer:GetAttribute("Dead") ~= true then
                game:GetService("ReplicatedStorage").Events.Respawn:FireServer()
            end
            if localplayer.Character and localplayer.Character:GetAttribute("Downed") then
                game:GetService("ReplicatedStorage").Events.Respawn:FireServer()
                task.wait(3)
            else
                revive()
                task.wait(1)
            end

        end
        if Settings.moneyfarm == false and Settings.afkfarm and localplayer.Character:FindFirstChild('HumanoidRootPart') ~= nil then
            localplayer.Character:FindFirstChild('HumanoidRootPart').CFrame = CFrame.new(6007, 7005, 8005)
        end
    end
end)

local column2 = tabsection:AddColumn({
   Title = "Server"
})

local section2 = column2:Section({
   Title = "Server"
})

section2:Button({
   Text = "Tp to full server",
   Callback = function()
    	local Player = game.Players.LocalPlayer    
		local Http = game:GetService("HttpService")
		local TPS = game:GetService("TeleportService")
		local Api = "https://games.roblox.com/v1/games/"

		local _place,_id = game.PlaceId, game.JobId
		local _servers = Api.._place.."/servers/Public?sortOrder=Desc&limit=100"
		function ListServers(cursor)
		   local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
		   return Http:JSONDecode(Raw)
		end

		local Next; repeat
		   local Servers = ListServers(Next)
		   for i,v in next, Servers.data do
		       if v.playing < v.maxPlayers and v.id ~= _id then
		           local s,r = pcall(TPS.TeleportToPlaceInstance,TPS,_place,v.id,Player)
		           if s then break end
		       end
		   end

		   Next = Servers.nextPageCursor
		until not Next
end
})

section2:Button({
   Text = "Tp to low server",
   Callback = function()
		local Http = game:GetService("HttpService")
		local TPS = game:GetService("TeleportService")
		local Api = "https://games.roblox.com/v1/games/"

		local _place = game.PlaceId
		local _servers = Api.._place.."/servers/Public?sortOrder=Asc&limit=100"
		function ListServers(cursor)
		   local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
		   return Http:JSONDecode(Raw)
		end

		local Server, Next; repeat
		   local Servers = ListServers(Next)
		   Server = Servers.data[1]
		   Next = Servers.nextPageCursor
		until Server

		TPS:TeleportToPlaceInstance(_place,Server.id,game.Players.LocalPlayer)
end
})

local GC = getconnections or get_signal_cons
	if GC then
		for i,v in pairs(GC(localplayer.Idled)) do
			if v["Disable"] then
				v["Disable"](v)
			elseif v["Disconnect"] then
				v["Disconnect"](v)
			end
		end
	else
		localplayer.Idled:Connect(function()
			local VirtualUser = game:GetService("VirtualUser")
			VirtualUser:CaptureController()
			VirtualUser:ClickButton2(Vector2.new())
		end)
	end
	
-- hide button
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = game.CoreGui

local TextButton = Instance.new("TextButton")
TextButton.Parent = ScreenGui

TextButton.Size = UDim2.new(0, 75, 0, 75)
TextButton.Position = UDim2.new(0.5, 75, 0, 0)
TextButton.BackgroundTransparency = 1
TextButton.Text = ""

local ImageLabel = Instance.new("ImageLabel")
ImageLabel.Parent = TextButton

ImageLabel.Size = UDim2.new(1, 0, 1, 0)
ImageLabel.BackgroundTransparency = 1
ImageLabel.Image = "rbxassetid://14768967526"

local Kronos = game.CoreGui:FindFirstChild("Kronos")

local UserInputService = game:GetService("UserInputService")

local isDragging = false
local offset = nil

TextButton.MouseButton1Click:Connect(function()
    if Kronos then
        Kronos.Enabled = not Kronos.Enabled
    end
end)

TextButton.InputBegan:Connect(function(input)
    if Kronos and input.UserInputType == Enum.UserInputType.Touch then
        isDragging = true
        offset = input.Position - TextButton.Position
    end
end)

UserInputService.InputChanged:Connect(function(input, gameProcessedEvent)
    if isDragging and input.UserInputType == Enum.UserInputType.Touch and not gameProcessedEvent then
        local newPosition = UDim2.new(0, input.Position.X - offset.X, 0, input.Position.Y - offset.Y)
        TextButton.Position = newPosition
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        isDragging = false
        offset = nil
    end
end)
